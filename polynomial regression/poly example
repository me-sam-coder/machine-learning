import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error
from sklearn.linear_model import LinearRegression

# Fitting Linear Regression to the dataset
df = pd.read_csv('C:\\Users\\mesam\\Downloads\\Dataset\\Dataset\\Position_Salaries.csv')
X = df.iloc[:, 1:2].values
y = df.iloc[:, 2].values

"""from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
X_train = sc_X.fit_transform(X_train)
X_test = sc_X.transform(X_test)"""

reg1 = LinearRegression()
reg1.fit(X, y)

# Fitting Polynomial Regression to the dataset
from sklearn.preprocessing import PolynomialFeatures
poly = PolynomialFeatures(degree = 4)
X_p = poly.fit_transform(X)
poly.fit(X_p, y)
reg2 = LinearRegression()
reg2.fit(X_p, y)

# Visualising the Linear Regression results
plt.scatter(X, y, color = 'red')
plt.plot(X, reg1.predict(X), color = 'blue')
plt.title('Truth or Bluff (Linear Regression)')
plt.xlabel('Position level')
plt.ylabel('Salary')
plt.show()

# Visualising the Polynomial Regression results
plt.scatter(X, y, color = 'red')
plt.plot(X, reg2.predict(poly.fit_transform(X)), color = 'blue')
plt.title('Truth or Bluff (Polynomial Regression)')
plt.xlabel('Position level')
plt.ylabel('Salary')
plt.show()

# Visualising the Polynomial Regression results (for higher resolution and smoother curve)
X_grid = np.arange(min(X), max(X), 0.1)
X_grid = X_grid.reshape((len(X_grid), 1))
plt.scatter(X, y, color = 'red')
plt.plot(X_grid, reg2.predict(poly.fit_transform(X_grid)), color = 'blue')
plt.title('Truth or Bluff (Polynomial Regression)')
plt.xlabel('Position level')
plt.ylabel('Salary')
plt.show()

o = reg1.predict(X = [[6.5],[6.5]])
o1 = reg2.predict(poly.fit_transform([[6.5],[6.5]]))
print(o)
print(o1)
