import numpy as np 
import pandas as pd
import tensorflow as tf
import matplotlib.pyplot as plt
from tensorflow import keras
from keras import backend as k
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D
from keras import regularizers, initializers, constraints
import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))
        
from keras.datasets import mnist 
(x_train, y_train), (x_test, y_test) = mnist.load_data()

row, col = 28, 28
if k.image_data_format() == 'channels_first':
    x_train = x_train.reshape(x_train.shape[0], 1, row, col)
    x_test = x_test.reshape(x_test.shape[0], 1, row, col)
    input_shape = (1, row, col)
else :
    x_train = x_train.reshape(x_train.shape[0], row, col, 1)
    x_test = x_test.reshape(x_test.shape[0], row, col, 1)
    input_shape = (row, col, 1)
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255

y_train = keras.utils.to_categorical(y_train, 10)
y_test = keras.utils.to_categorical(y_test, 10)

print(x_train.shape)
print(x_test.shape)

model = Sequential()
model.add(Conv2D(32, kernel_size = (3, 3), activation = 'relu', input_shape = input_shape))
model.add(Conv2D(64, (3, 3), activation = 'relu'))
model.add(MaxPooling2D(pool_size = (2, 2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(128, activation = 'relu'))
model.add(Dropout(0.5))
model.add(Dense(10, activation = 'softmax'))

model.compile(loss = keras.losses.categorical_crossentropy, optimizer = keras.optimizers.Adadelta(), metrics = ['accuracy'])

model.fit(x_train, y_train, batch_size = 128, epochs = 12, verbose = 1, validation_data = (x_test, y_test))
